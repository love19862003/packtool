// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GameConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Pro {

namespace {

const ::google::protobuf::Descriptor* GameConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GameConfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_GameConfig_2eproto() {
  protobuf_AddDesc_GameConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GameConfig.proto");
  GOOGLE_CHECK(file != NULL);
  GameConfig_descriptor_ = file->message_type(0);
  static const int GameConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameConfig, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameConfig, monster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameConfig, role_),
  };
  GameConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameConfig_descriptor_,
      GameConfig::internal_default_instance(),
      GameConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameConfig, _has_bits_),
      -1,
      -1,
      sizeof(GameConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameConfig, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GameConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameConfig_descriptor_, GameConfig::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GameConfig_2eproto() {
  GameConfig_default_instance_.Shutdown();
  delete GameConfig_reflection_;
}

void protobuf_InitDefaults_GameConfig_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Pro::protobuf_InitDefaults_EnumDefineConfig_2eproto();
  ::Pro::protobuf_InitDefaults_ConfigTypeGroup_2eproto();
  ::Pro::protobuf_InitDefaults_roleConfig_2eproto();
  ::Pro::protobuf_InitDefaults_monsterConfig_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  GameConfig_default_instance_.DefaultConstruct();
  GameConfig_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_GameConfig_2eproto_once_);
void protobuf_InitDefaults_GameConfig_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_GameConfig_2eproto_once_,
                 &protobuf_InitDefaults_GameConfig_2eproto_impl);
}
void protobuf_AddDesc_GameConfig_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_GameConfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020GameConfig.proto\022\003Pro\032\026EnumDefineConfi"
    "g.proto\032\025ConfigTypeGroup.proto\032\020roleConf"
    "ig.proto\032\023monsterConfig.proto\"a\n\nGameCon"
    "fig\022\017\n\007version\030\001 \001(\t\022#\n\007monster\030\002 \003(\0132\022."
    "Pro.monsterConfig\022\035\n\004role\030\003 \003(\0132\017.Pro.ro"
    "leConfig", 208);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GameConfig.proto", &protobuf_RegisterTypes);
  ::Pro::protobuf_AddDesc_EnumDefineConfig_2eproto();
  ::Pro::protobuf_AddDesc_ConfigTypeGroup_2eproto();
  ::Pro::protobuf_AddDesc_roleConfig_2eproto();
  ::Pro::protobuf_AddDesc_monsterConfig_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GameConfig_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_GameConfig_2eproto_once_);
void protobuf_AddDesc_GameConfig_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_GameConfig_2eproto_once_,
                 &protobuf_AddDesc_GameConfig_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GameConfig_2eproto {
  StaticDescriptorInitializer_GameConfig_2eproto() {
    protobuf_AddDesc_GameConfig_2eproto();
  }
} static_descriptor_initializer_GameConfig_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameConfig::kVersionFieldNumber;
const int GameConfig::kMonsterFieldNumber;
const int GameConfig::kRoleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameConfig::GameConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_GameConfig_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pro.GameConfig)
}

void GameConfig::InitAsDefaultInstance() {
}

GameConfig::GameConfig(const GameConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pro.GameConfig)
}

void GameConfig::SharedCtor() {
  _cached_size_ = 0;
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GameConfig::~GameConfig() {
  // @@protoc_insertion_point(destructor:Pro.GameConfig)
  SharedDtor();
}

void GameConfig::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameConfig_descriptor_;
}

const GameConfig& GameConfig::default_instance() {
  protobuf_InitDefaults_GameConfig_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GameConfig> GameConfig_default_instance_;

GameConfig* GameConfig::New(::google::protobuf::Arena* arena) const {
  GameConfig* n = new GameConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:Pro.GameConfig)
  if (has_version()) {
    version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  monster_.Clear();
  role_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GameConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pro.GameConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Pro.GameConfig.version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_monster;
        break;
      }

      // repeated .Pro.monsterConfig monster = 2;
      case 2: {
        if (tag == 18) {
         parse_monster:
          DO_(input->IncrementRecursionDepth());
         parse_loop_monster:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_monster()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_monster;
        if (input->ExpectTag(26)) goto parse_loop_role;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .Pro.roleConfig role = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_role:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_role()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_role;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pro.GameConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pro.GameConfig)
  return false;
#undef DO_
}

void GameConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pro.GameConfig)
  // optional string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Pro.GameConfig.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  // repeated .Pro.monsterConfig monster = 2;
  for (unsigned int i = 0, n = this->monster_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->monster(i), output);
  }

  // repeated .Pro.roleConfig role = 3;
  for (unsigned int i = 0, n = this->role_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->role(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pro.GameConfig)
}

::google::protobuf::uint8* GameConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pro.GameConfig)
  // optional string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Pro.GameConfig.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // repeated .Pro.monsterConfig monster = 2;
  for (unsigned int i = 0, n = this->monster_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->monster(i), false, target);
  }

  // repeated .Pro.roleConfig role = 3;
  for (unsigned int i = 0, n = this->role_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->role(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pro.GameConfig)
  return target;
}

size_t GameConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pro.GameConfig)
  size_t total_size = 0;

  // optional string version = 1;
  if (has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // repeated .Pro.monsterConfig monster = 2;
  {
    unsigned int count = this->monster_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->monster(i));
    }
  }

  // repeated .Pro.roleConfig role = 3;
  {
    unsigned int count = this->role_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pro.GameConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GameConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pro.GameConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pro.GameConfig)
    UnsafeMergeFrom(*source);
  }
}

void GameConfig::MergeFrom(const GameConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pro.GameConfig)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GameConfig::UnsafeMergeFrom(const GameConfig& from) {
  GOOGLE_DCHECK(&from != this);
  monster_.MergeFrom(from.monster_);
  role_.MergeFrom(from.role_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_has_version();
      version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void GameConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pro.GameConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameConfig::CopyFrom(const GameConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pro.GameConfig)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GameConfig::IsInitialized() const {

  return true;
}

void GameConfig::Swap(GameConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameConfig::InternalSwap(GameConfig* other) {
  version_.Swap(&other->version_);
  monster_.UnsafeArenaSwap(&other->monster_);
  role_.UnsafeArenaSwap(&other->role_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameConfig_descriptor_;
  metadata.reflection = GameConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameConfig

// optional string version = 1;
bool GameConfig::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameConfig::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void GameConfig::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameConfig::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
const ::std::string& GameConfig::version() const {
  // @@protoc_insertion_point(field_get:Pro.GameConfig.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameConfig::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pro.GameConfig.version)
}
void GameConfig::set_version(const char* value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pro.GameConfig.version)
}
void GameConfig::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pro.GameConfig.version)
}
::std::string* GameConfig::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:Pro.GameConfig.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameConfig::release_version() {
  // @@protoc_insertion_point(field_release:Pro.GameConfig.version)
  clear_has_version();
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameConfig::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:Pro.GameConfig.version)
}

// repeated .Pro.monsterConfig monster = 2;
int GameConfig::monster_size() const {
  return monster_.size();
}
void GameConfig::clear_monster() {
  monster_.Clear();
}
const ::Pro::monsterConfig& GameConfig::monster(int index) const {
  // @@protoc_insertion_point(field_get:Pro.GameConfig.monster)
  return monster_.Get(index);
}
::Pro::monsterConfig* GameConfig::mutable_monster(int index) {
  // @@protoc_insertion_point(field_mutable:Pro.GameConfig.monster)
  return monster_.Mutable(index);
}
::Pro::monsterConfig* GameConfig::add_monster() {
  // @@protoc_insertion_point(field_add:Pro.GameConfig.monster)
  return monster_.Add();
}
::google::protobuf::RepeatedPtrField< ::Pro::monsterConfig >*
GameConfig::mutable_monster() {
  // @@protoc_insertion_point(field_mutable_list:Pro.GameConfig.monster)
  return &monster_;
}
const ::google::protobuf::RepeatedPtrField< ::Pro::monsterConfig >&
GameConfig::monster() const {
  // @@protoc_insertion_point(field_list:Pro.GameConfig.monster)
  return monster_;
}

// repeated .Pro.roleConfig role = 3;
int GameConfig::role_size() const {
  return role_.size();
}
void GameConfig::clear_role() {
  role_.Clear();
}
const ::Pro::roleConfig& GameConfig::role(int index) const {
  // @@protoc_insertion_point(field_get:Pro.GameConfig.role)
  return role_.Get(index);
}
::Pro::roleConfig* GameConfig::mutable_role(int index) {
  // @@protoc_insertion_point(field_mutable:Pro.GameConfig.role)
  return role_.Mutable(index);
}
::Pro::roleConfig* GameConfig::add_role() {
  // @@protoc_insertion_point(field_add:Pro.GameConfig.role)
  return role_.Add();
}
::google::protobuf::RepeatedPtrField< ::Pro::roleConfig >*
GameConfig::mutable_role() {
  // @@protoc_insertion_point(field_mutable_list:Pro.GameConfig.role)
  return &role_;
}
const ::google::protobuf::RepeatedPtrField< ::Pro::roleConfig >&
GameConfig::role() const {
  // @@protoc_insertion_point(field_list:Pro.GameConfig.role)
  return role_;
}

inline const GameConfig* GameConfig::internal_default_instance() {
  return &GameConfig_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Pro

// @@protoc_insertion_point(global_scope)
