// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EnumDefineConfig.proto

#ifndef PROTOBUF_EnumDefineConfig_2eproto__INCLUDED
#define PROTOBUF_EnumDefineConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Pro {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_EnumDefineConfig_2eproto();
void protobuf_InitDefaults_EnumDefineConfig_2eproto();
void protobuf_AssignDesc_EnumDefineConfig_2eproto();
void protobuf_ShutdownFile_EnumDefineConfig_2eproto();

class ConfigTypeGroupcamptype;

enum camptype {
  camp_light = 1,
  camp_dark = 2
};
bool camptype_IsValid(int value);
const camptype camptype_MIN = camp_light;
const camptype camptype_MAX = camp_dark;
const int camptype_ARRAYSIZE = camptype_MAX + 1;

const ::google::protobuf::EnumDescriptor* camptype_descriptor();
inline const ::std::string& camptype_Name(camptype value) {
  return ::google::protobuf::internal::NameOfEnum(
    camptype_descriptor(), value);
}
inline bool camptype_Parse(
    const ::std::string& name, camptype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<camptype>(
    camptype_descriptor(), name, value);
}
// ===================================================================

class ConfigTypeGroupcamptype : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pro.ConfigTypeGroupcamptype) */ {
 public:
  ConfigTypeGroupcamptype();
  virtual ~ConfigTypeGroupcamptype();

  ConfigTypeGroupcamptype(const ConfigTypeGroupcamptype& from);

  inline ConfigTypeGroupcamptype& operator=(const ConfigTypeGroupcamptype& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigTypeGroupcamptype& default_instance();

  static const ConfigTypeGroupcamptype* internal_default_instance();

  void Swap(ConfigTypeGroupcamptype* other);

  // implements Message ----------------------------------------------

  inline ConfigTypeGroupcamptype* New() const { return New(NULL); }

  ConfigTypeGroupcamptype* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConfigTypeGroupcamptype& from);
  void MergeFrom(const ConfigTypeGroupcamptype& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConfigTypeGroupcamptype* other);
  void UnsafeMergeFrom(const ConfigTypeGroupcamptype& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Pro.camptype array = 1;
  int array_size() const;
  void clear_array();
  static const int kArrayFieldNumber = 1;
  ::Pro::camptype array(int index) const;
  void set_array(int index, ::Pro::camptype value);
  void add_array(::Pro::camptype value);
  const ::google::protobuf::RepeatedField<int>& array() const;
  ::google::protobuf::RepeatedField<int>* mutable_array();

  // @@protoc_insertion_point(class_scope:Pro.ConfigTypeGroupcamptype)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField<int> array_;
  friend void  protobuf_InitDefaults_EnumDefineConfig_2eproto_impl();
  friend void  protobuf_AddDesc_EnumDefineConfig_2eproto_impl();
  friend void protobuf_AssignDesc_EnumDefineConfig_2eproto();
  friend void protobuf_ShutdownFile_EnumDefineConfig_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ConfigTypeGroupcamptype> ConfigTypeGroupcamptype_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ConfigTypeGroupcamptype

// repeated .Pro.camptype array = 1;
inline int ConfigTypeGroupcamptype::array_size() const {
  return array_.size();
}
inline void ConfigTypeGroupcamptype::clear_array() {
  array_.Clear();
}
inline ::Pro::camptype ConfigTypeGroupcamptype::array(int index) const {
  // @@protoc_insertion_point(field_get:Pro.ConfigTypeGroupcamptype.array)
  return static_cast< ::Pro::camptype >(array_.Get(index));
}
inline void ConfigTypeGroupcamptype::set_array(int index, ::Pro::camptype value) {
  assert(::Pro::camptype_IsValid(value));
  array_.Set(index, value);
  // @@protoc_insertion_point(field_set:Pro.ConfigTypeGroupcamptype.array)
}
inline void ConfigTypeGroupcamptype::add_array(::Pro::camptype value) {
  assert(::Pro::camptype_IsValid(value));
  array_.Add(value);
  // @@protoc_insertion_point(field_add:Pro.ConfigTypeGroupcamptype.array)
}
inline const ::google::protobuf::RepeatedField<int>&
ConfigTypeGroupcamptype::array() const {
  // @@protoc_insertion_point(field_list:Pro.ConfigTypeGroupcamptype.array)
  return array_;
}
inline ::google::protobuf::RepeatedField<int>*
ConfigTypeGroupcamptype::mutable_array() {
  // @@protoc_insertion_point(field_mutable_list:Pro.ConfigTypeGroupcamptype.array)
  return &array_;
}

inline const ConfigTypeGroupcamptype* ConfigTypeGroupcamptype::internal_default_instance() {
  return &ConfigTypeGroupcamptype_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Pro

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Pro::camptype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Pro::camptype>() {
  return ::Pro::camptype_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_EnumDefineConfig_2eproto__INCLUDED
