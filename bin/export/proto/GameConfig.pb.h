// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameConfig.proto

#ifndef PROTOBUF_GameConfig_2eproto__INCLUDED
#define PROTOBUF_GameConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "EnumDefineConfig.pb.h"
#include "ConfigTypeGroup.pb.h"
#include "roleConfig.pb.h"
#include "monsterConfig.pb.h"
// @@protoc_insertion_point(includes)

namespace Pro {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_GameConfig_2eproto();
void protobuf_InitDefaults_GameConfig_2eproto();
void protobuf_AssignDesc_GameConfig_2eproto();
void protobuf_ShutdownFile_GameConfig_2eproto();

class GameConfig;

// ===================================================================

class GameConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pro.GameConfig) */ {
 public:
  GameConfig();
  virtual ~GameConfig();

  GameConfig(const GameConfig& from);

  inline GameConfig& operator=(const GameConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameConfig& default_instance();

  static const GameConfig* internal_default_instance();

  void Swap(GameConfig* other);

  // implements Message ----------------------------------------------

  inline GameConfig* New() const { return New(NULL); }

  GameConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameConfig& from);
  void MergeFrom(const GameConfig& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GameConfig* other);
  void UnsafeMergeFrom(const GameConfig& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // repeated .Pro.monsterConfig monster = 2;
  int monster_size() const;
  void clear_monster();
  static const int kMonsterFieldNumber = 2;
  const ::Pro::monsterConfig& monster(int index) const;
  ::Pro::monsterConfig* mutable_monster(int index);
  ::Pro::monsterConfig* add_monster();
  ::google::protobuf::RepeatedPtrField< ::Pro::monsterConfig >*
      mutable_monster();
  const ::google::protobuf::RepeatedPtrField< ::Pro::monsterConfig >&
      monster() const;

  // repeated .Pro.roleConfig role = 3;
  int role_size() const;
  void clear_role();
  static const int kRoleFieldNumber = 3;
  const ::Pro::roleConfig& role(int index) const;
  ::Pro::roleConfig* mutable_role(int index);
  ::Pro::roleConfig* add_role();
  ::google::protobuf::RepeatedPtrField< ::Pro::roleConfig >*
      mutable_role();
  const ::google::protobuf::RepeatedPtrField< ::Pro::roleConfig >&
      role() const;

  // @@protoc_insertion_point(class_scope:Pro.GameConfig)
 private:
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Pro::monsterConfig > monster_;
  ::google::protobuf::RepeatedPtrField< ::Pro::roleConfig > role_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  friend void  protobuf_InitDefaults_GameConfig_2eproto_impl();
  friend void  protobuf_AddDesc_GameConfig_2eproto_impl();
  friend void protobuf_AssignDesc_GameConfig_2eproto();
  friend void protobuf_ShutdownFile_GameConfig_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<GameConfig> GameConfig_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// GameConfig

// optional string version = 1;
inline bool GameConfig::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameConfig::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameConfig::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameConfig::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
inline const ::std::string& GameConfig::version() const {
  // @@protoc_insertion_point(field_get:Pro.GameConfig.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameConfig::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pro.GameConfig.version)
}
inline void GameConfig::set_version(const char* value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pro.GameConfig.version)
}
inline void GameConfig::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pro.GameConfig.version)
}
inline ::std::string* GameConfig::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:Pro.GameConfig.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameConfig::release_version() {
  // @@protoc_insertion_point(field_release:Pro.GameConfig.version)
  clear_has_version();
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameConfig::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:Pro.GameConfig.version)
}

// repeated .Pro.monsterConfig monster = 2;
inline int GameConfig::monster_size() const {
  return monster_.size();
}
inline void GameConfig::clear_monster() {
  monster_.Clear();
}
inline const ::Pro::monsterConfig& GameConfig::monster(int index) const {
  // @@protoc_insertion_point(field_get:Pro.GameConfig.monster)
  return monster_.Get(index);
}
inline ::Pro::monsterConfig* GameConfig::mutable_monster(int index) {
  // @@protoc_insertion_point(field_mutable:Pro.GameConfig.monster)
  return monster_.Mutable(index);
}
inline ::Pro::monsterConfig* GameConfig::add_monster() {
  // @@protoc_insertion_point(field_add:Pro.GameConfig.monster)
  return monster_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Pro::monsterConfig >*
GameConfig::mutable_monster() {
  // @@protoc_insertion_point(field_mutable_list:Pro.GameConfig.monster)
  return &monster_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Pro::monsterConfig >&
GameConfig::monster() const {
  // @@protoc_insertion_point(field_list:Pro.GameConfig.monster)
  return monster_;
}

// repeated .Pro.roleConfig role = 3;
inline int GameConfig::role_size() const {
  return role_.size();
}
inline void GameConfig::clear_role() {
  role_.Clear();
}
inline const ::Pro::roleConfig& GameConfig::role(int index) const {
  // @@protoc_insertion_point(field_get:Pro.GameConfig.role)
  return role_.Get(index);
}
inline ::Pro::roleConfig* GameConfig::mutable_role(int index) {
  // @@protoc_insertion_point(field_mutable:Pro.GameConfig.role)
  return role_.Mutable(index);
}
inline ::Pro::roleConfig* GameConfig::add_role() {
  // @@protoc_insertion_point(field_add:Pro.GameConfig.role)
  return role_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Pro::roleConfig >*
GameConfig::mutable_role() {
  // @@protoc_insertion_point(field_mutable_list:Pro.GameConfig.role)
  return &role_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Pro::roleConfig >&
GameConfig::role() const {
  // @@protoc_insertion_point(field_list:Pro.GameConfig.role)
  return role_;
}

inline const GameConfig* GameConfig::internal_default_instance() {
  return &GameConfig_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Pro

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GameConfig_2eproto__INCLUDED
