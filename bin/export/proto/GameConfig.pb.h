// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameConfig.proto

#ifndef PROTOBUF_INCLUDED_GameConfig_2eproto
#define PROTOBUF_INCLUDED_GameConfig_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "EnumDefineConfig.pb.h"
#include "ConfigTypeGroup.pb.h"
#include "roleConfig.pb.h"
#include "monsterConfig.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_GameConfig_2eproto 

namespace protobuf_GameConfig_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_GameConfig_2eproto
namespace Pro {
class GameConfig;
class GameConfigDefaultTypeInternal;
extern GameConfigDefaultTypeInternal _GameConfig_default_instance_;
}  // namespace Pro
namespace google {
namespace protobuf {
template<> ::Pro::GameConfig* Arena::CreateMaybeMessage<::Pro::GameConfig>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Pro {

// ===================================================================

class GameConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pro.GameConfig) */ {
 public:
  GameConfig();
  virtual ~GameConfig();

  GameConfig(const GameConfig& from);

  inline GameConfig& operator=(const GameConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameConfig(GameConfig&& from) noexcept
    : GameConfig() {
    *this = ::std::move(from);
  }

  inline GameConfig& operator=(GameConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameConfig* internal_default_instance() {
    return reinterpret_cast<const GameConfig*>(
               &_GameConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GameConfig* other);
  friend void swap(GameConfig& a, GameConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameConfig* New() const final {
    return CreateMaybeMessage<GameConfig>(NULL);
  }

  GameConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameConfig& from);
  void MergeFrom(const GameConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Pro.monsterConfig monster = 2;
  int monster_size() const;
  void clear_monster();
  static const int kMonsterFieldNumber = 2;
  ::Pro::monsterConfig* mutable_monster(int index);
  ::google::protobuf::RepeatedPtrField< ::Pro::monsterConfig >*
      mutable_monster();
  const ::Pro::monsterConfig& monster(int index) const;
  ::Pro::monsterConfig* add_monster();
  const ::google::protobuf::RepeatedPtrField< ::Pro::monsterConfig >&
      monster() const;

  // repeated .Pro.roleConfig role = 3;
  int role_size() const;
  void clear_role();
  static const int kRoleFieldNumber = 3;
  ::Pro::roleConfig* mutable_role(int index);
  ::google::protobuf::RepeatedPtrField< ::Pro::roleConfig >*
      mutable_role();
  const ::Pro::roleConfig& role(int index) const;
  ::Pro::roleConfig* add_role();
  const ::google::protobuf::RepeatedPtrField< ::Pro::roleConfig >&
      role() const;

  // string version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // @@protoc_insertion_point(class_scope:Pro.GameConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Pro::monsterConfig > monster_;
  ::google::protobuf::RepeatedPtrField< ::Pro::roleConfig > role_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_GameConfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GameConfig

// string version = 1;
inline void GameConfig::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameConfig::version() const {
  // @@protoc_insertion_point(field_get:Pro.GameConfig.version)
  return version_.GetNoArena();
}
inline void GameConfig::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Pro.GameConfig.version)
}
#if LANG_CXX11
inline void GameConfig::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Pro.GameConfig.version)
}
#endif
inline void GameConfig::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Pro.GameConfig.version)
}
inline void GameConfig::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Pro.GameConfig.version)
}
inline ::std::string* GameConfig::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:Pro.GameConfig.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameConfig::release_version() {
  // @@protoc_insertion_point(field_release:Pro.GameConfig.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameConfig::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:Pro.GameConfig.version)
}

// repeated .Pro.monsterConfig monster = 2;
inline int GameConfig::monster_size() const {
  return monster_.size();
}
inline ::Pro::monsterConfig* GameConfig::mutable_monster(int index) {
  // @@protoc_insertion_point(field_mutable:Pro.GameConfig.monster)
  return monster_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Pro::monsterConfig >*
GameConfig::mutable_monster() {
  // @@protoc_insertion_point(field_mutable_list:Pro.GameConfig.monster)
  return &monster_;
}
inline const ::Pro::monsterConfig& GameConfig::monster(int index) const {
  // @@protoc_insertion_point(field_get:Pro.GameConfig.monster)
  return monster_.Get(index);
}
inline ::Pro::monsterConfig* GameConfig::add_monster() {
  // @@protoc_insertion_point(field_add:Pro.GameConfig.monster)
  return monster_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Pro::monsterConfig >&
GameConfig::monster() const {
  // @@protoc_insertion_point(field_list:Pro.GameConfig.monster)
  return monster_;
}

// repeated .Pro.roleConfig role = 3;
inline int GameConfig::role_size() const {
  return role_.size();
}
inline ::Pro::roleConfig* GameConfig::mutable_role(int index) {
  // @@protoc_insertion_point(field_mutable:Pro.GameConfig.role)
  return role_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Pro::roleConfig >*
GameConfig::mutable_role() {
  // @@protoc_insertion_point(field_mutable_list:Pro.GameConfig.role)
  return &role_;
}
inline const ::Pro::roleConfig& GameConfig::role(int index) const {
  // @@protoc_insertion_point(field_get:Pro.GameConfig.role)
  return role_.Get(index);
}
inline ::Pro::roleConfig* GameConfig::add_role() {
  // @@protoc_insertion_point(field_add:Pro.GameConfig.role)
  return role_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Pro::roleConfig >&
GameConfig::role() const {
  // @@protoc_insertion_point(field_list:Pro.GameConfig.role)
  return role_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Pro

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_GameConfig_2eproto
